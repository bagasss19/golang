// Code generated by MockGen. DO NOT EDIT.
// Source: domain/ar/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "fico_ar/domain/ar/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArRepository is a mock of ArRepository interface.
type MockArRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArRepositoryMockRecorder
}

// MockArRepositoryMockRecorder is the mock recorder for MockArRepository.
type MockArRepositoryMockRecorder struct {
	mock *MockArRepository
}

// NewMockArRepository creates a new mock instance.
func NewMockArRepository(ctrl *gomock.Controller) *MockArRepository {
	mock := &MockArRepository{ctrl: ctrl}
	mock.recorder = &MockArRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArRepository) EXPECT() *MockArRepositoryMockRecorder {
	return m.recorder
}

// DeleteData mocks base method.
func (m *MockArRepository) DeleteData(ctx context.Context, arID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", ctx, arID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockArRepositoryMockRecorder) DeleteData(ctx, arID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockArRepository)(nil).DeleteData), ctx, arID)
}

// GetAllCompanyCode mocks base method.
func (m *MockArRepository) GetAllCompanyCode(ctx context.Context) ([]model.ARSales, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCompanyCode", ctx)
	ret0, _ := ret[0].([]model.ARSales)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCompanyCode indicates an expected call of GetAllCompanyCode.
func (mr *MockArRepositoryMockRecorder) GetAllCompanyCode(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCompanyCode", reflect.TypeOf((*MockArRepository)(nil).GetAllCompanyCode), ctx)
}

// GetAllData mocks base method.
func (m *MockArRepository) GetAllData(ctx context.Context, payload *model.ARFilterList) (model.GetAllARResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllData", ctx, payload)
	ret0, _ := ret[0].(model.GetAllARResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllData indicates an expected call of GetAllData.
func (mr *MockArRepositoryMockRecorder) GetAllData(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllData", reflect.TypeOf((*MockArRepository)(nil).GetAllData), ctx, payload)
}

// GetOneData mocks base method.
func (m *MockArRepository) GetOneData(ctx context.Context, arID int64) (model.AR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneData", ctx, arID)
	ret0, _ := ret[0].(model.AR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneData indicates an expected call of GetOneData.
func (mr *MockArRepositoryMockRecorder) GetOneData(ctx, arID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneData", reflect.TypeOf((*MockArRepository)(nil).GetOneData), ctx, arID)
}

// UpdateData mocks base method.
func (m *MockArRepository) UpdateData(ctx context.Context, request model.ARUpdate, columns map[string]interface{}, arID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", ctx, request, columns, arID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockArRepositoryMockRecorder) UpdateData(ctx, request, columns, arID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockArRepository)(nil).UpdateData), ctx, request, columns, arID)
}

// UpdateStatusData mocks base method.
func (m *MockArRepository) UpdateStatusData(ctx context.Context, status, arID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusData", ctx, status, arID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusData indicates an expected call of UpdateStatusData.
func (mr *MockArRepositoryMockRecorder) UpdateStatusData(ctx, status, arID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusData", reflect.TypeOf((*MockArRepository)(nil).UpdateStatusData), ctx, status, arID)
}
