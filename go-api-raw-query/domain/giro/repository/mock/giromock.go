// Code generated by MockGen. DO NOT EDIT.
// Source: domain/giro/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "fico_ar/domain/giro/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGiroRepository is a mock of GiroRepository interface.
type MockGiroRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGiroRepositoryMockRecorder
}

// MockGiroRepositoryMockRecorder is the mock recorder for MockGiroRepository.
type MockGiroRepositoryMockRecorder struct {
	mock *MockGiroRepository
}

// NewMockGiroRepository creates a new mock instance.
func NewMockGiroRepository(ctrl *gomock.Controller) *MockGiroRepository {
	mock := &MockGiroRepository{ctrl: ctrl}
	mock.recorder = &MockGiroRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGiroRepository) EXPECT() *MockGiroRepositoryMockRecorder {
	return m.recorder
}

// CreateData mocks base method.
func (m *MockGiroRepository) CreateData(ctx context.Context, request model.Giro) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateData", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateData indicates an expected call of CreateData.
func (mr *MockGiroRepositoryMockRecorder) CreateData(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateData", reflect.TypeOf((*MockGiroRepository)(nil).CreateData), ctx, request)
}

// DeleteData mocks base method.
func (m *MockGiroRepository) DeleteData(ctx context.Context, giroID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteData", ctx, giroID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteData indicates an expected call of DeleteData.
func (mr *MockGiroRepositoryMockRecorder) DeleteData(ctx, giroID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteData", reflect.TypeOf((*MockGiroRepository)(nil).DeleteData), ctx, giroID)
}

// GetAllData mocks base method.
func (m *MockGiroRepository) GetAllData(ctx context.Context, payload *model.GetGiroListPayload) (model.GetAllGiroResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllData", ctx, payload)
	ret0, _ := ret[0].(model.GetAllGiroResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllData indicates an expected call of GetAllData.
func (mr *MockGiroRepositoryMockRecorder) GetAllData(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllData", reflect.TypeOf((*MockGiroRepository)(nil).GetAllData), ctx, payload)
}

// GetOneData mocks base method.
func (m *MockGiroRepository) GetOneData(ctx context.Context, giroID int64) (model.Giro, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneData", ctx, giroID)
	ret0, _ := ret[0].(model.Giro)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneData indicates an expected call of GetOneData.
func (mr *MockGiroRepositoryMockRecorder) GetOneData(ctx, giroID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneData", reflect.TypeOf((*MockGiroRepository)(nil).GetOneData), ctx, giroID)
}

// UpdateData mocks base method.
func (m *MockGiroRepository) UpdateData(ctx context.Context, request model.GiroRequest, columns map[string]interface{}, giroID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", ctx, request, columns, giroID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockGiroRepositoryMockRecorder) UpdateData(ctx, request, columns, giroID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockGiroRepository)(nil).UpdateData), ctx, request, columns, giroID)
}
